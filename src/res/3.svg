<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (12,347 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.05%)</title><rect x="10.2" y="883.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.02%)</title><rect x="10.3" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (20 samples, 0.16%)</title><rect x="11.0" y="883.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.02%)</title><rect x="11.0" y="867.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (16 samples, 0.13%)</title><rect x="11.2" y="867.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (15 samples, 0.12%)</title><rect x="11.2" y="851.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.12%)</title><rect x="11.2" y="835.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (8 samples, 0.06%)</title><rect x="11.7" y="819.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.02%)</title><rect x="11.9" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.02%)</title><rect x="11.9" y="787.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.9" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (18 samples, 0.15%)</title><rect x="13.2" y="883.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.2" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (16 samples, 0.13%)</title><rect x="13.3" y="867.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.3" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.02%)</title><rect x="13.4" y="851.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (12 samples, 0.10%)</title><rect x="13.7" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.7" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (11 samples, 0.09%)</title><rect x="13.8" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.02%)</title><rect x="14.4" y="819.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="17.4" y="830.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.11%)</title><rect x="15.1" y="883.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="18.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.02%)</title><rect x="15.3" y="867.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.02%)</title><rect x="15.3" y="851.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.3" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.02%)</title><rect x="15.3" y="835.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.3" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (4 samples, 0.03%)</title><rect x="15.9" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.9" y="878.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="16.3" y="883.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.3" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (33 samples, 0.27%)</title><rect x="16.8" y="883.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="19.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.3" y="867.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="22.3" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.02%)</title><rect x="19.7" y="867.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="22.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="851.0" width="0.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="22.7" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="835.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="819.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="22.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="803.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="22.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="787.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="771.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="22.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="755.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="22.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="19.7" y="739.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="22.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 0.11%)</title><rect x="20.0" y="883.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.0" y="894.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="20.2" y="867.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="23.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="20.2" y="851.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="23.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.08%)</title><rect x="20.4" y="835.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="23.4" y="846.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.07%)</title><rect x="20.5" y="819.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="20.7" y="803.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="23.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="20.7" y="787.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="23.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="20.9" y="771.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="23.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="20.9" y="755.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="23.9" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="21.0" y="739.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="24.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (7,372 samples, 59.71%)</title><rect x="21.6" y="883.0" width="704.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.6" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (7,372 samples, 59.71%)</title><rect x="21.6" y="867.0" width="704.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (7,372 samples, 59.71%)</title><rect x="21.6" y="851.0" width="704.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.03%)</title><rect x="24.1" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.06%)</title><rect x="24.7" y="835.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.05%)</title><rect x="24.9" y="819.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.9" y="830.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (5 samples, 0.04%)</title><rect x="25.0" y="803.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="28.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (9 samples, 0.07%)</title><rect x="25.5" y="835.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.07%)</title><rect x="25.5" y="819.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (8 samples, 0.06%)</title><rect x="25.6" y="803.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.06%)</title><rect x="25.6" y="787.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.06%)</title><rect x="25.6" y="771.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (8 samples, 0.06%)</title><rect x="25.6" y="755.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 0.09%)</title><rect x="26.3" y="835.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.09%)</title><rect x="26.3" y="819.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (4 samples, 0.03%)</title><rect x="27.0" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,589 samples, 12.87%)</title><rect x="27.4" y="835.0" width="151.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.4" y="846.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,568 samples, 12.70%)</title><rect x="29.4" y="819.0" width="149.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.4" y="830.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.03%)</title><rect x="31.4" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,142 samples, 9.25%)</title><rect x="32.2" y="803.0" width="109.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.2" y="814.0">java/util/con..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.02%)</title><rect x="33.4" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (66 samples, 0.53%)</title><rect x="33.7" y="787.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="37.1" y="771.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="40.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="37.1" y="755.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="40.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="37.1" y="739.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="40.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (26 samples, 0.21%)</title><rect x="37.4" y="771.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.4" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (3 samples, 0.02%)</title><rect x="38.2" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.2" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (9 samples, 0.07%)</title><rect x="38.5" y="755.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.05%)</title><rect x="39.3" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (49 samples, 0.40%)</title><rect x="40.2" y="787.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.06%)</title><rect x="40.7" y="771.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.06%)</title><rect x="40.7" y="755.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.06%)</title><rect x="40.7" y="739.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.7" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (5 samples, 0.04%)</title><rect x="40.7" y="723.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="43.7" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.02%)</title><rect x="40.9" y="707.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="43.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="41.2" y="723.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="44.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.02%)</title><rect x="41.2" y="707.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="44.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (34 samples, 0.28%)</title><rect x="41.6" y="771.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (34 samples, 0.28%)</title><rect x="41.6" y="755.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (7 samples, 0.06%)</title><rect x="43.3" y="739.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (10 samples, 0.08%)</title><rect x="43.9" y="739.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.9" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (10 samples, 0.08%)</title><rect x="43.9" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="46.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (10 samples, 0.08%)</title><rect x="43.9" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="46.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (168 samples, 1.36%)</title><rect x="44.9" y="787.0" width="16.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (166 samples, 1.34%)</title><rect x="45.1" y="771.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (136 samples, 1.10%)</title><rect x="47.3" y="755.0" width="13.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (8 samples, 0.06%)</title><rect x="48.7" y="739.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.06%)</title><rect x="48.7" y="723.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (110 samples, 0.89%)</title><rect x="49.5" y="739.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (110 samples, 0.89%)</title><rect x="49.5" y="723.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (26 samples, 0.21%)</title><rect x="50.0" y="707.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="53.0" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.06%)</title><rect x="50.7" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="53.7" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.02%)</title><rect x="51.7" y="691.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="54.7" y="702.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.04%)</title><rect x="52.0" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="55.0" y="702.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (74 samples, 0.60%)</title><rect x="52.9" y="707.0" width="7.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="55.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 0.53%)</title><rect x="53.8" y="691.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="56.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 0.53%)</title><rect x="53.8" y="675.0" width="6.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="56.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 0.46%)</title><rect x="54.5" y="659.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="57.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 0.46%)</title><rect x="54.5" y="643.0" width="5.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="57.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 0.46%)</title><rect x="54.5" y="627.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="57.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 0.43%)</title><rect x="54.9" y="611.0" width="5.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="57.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.37%)</title><rect x="55.6" y="595.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="58.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.33%)</title><rect x="56.1" y="579.0" width="3.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="59.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.02%)</title><rect x="60.0" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (7 samples, 0.06%)</title><rect x="60.3" y="755.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (10 samples, 0.08%)</title><rect x="60.9" y="787.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (831 samples, 6.73%)</title><rect x="61.9" y="787.0" width="79.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.9" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (3 samples, 0.02%)</title><rect x="61.9" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.9" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (828 samples, 6.71%)</title><rect x="62.2" y="771.0" width="79.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.2" y="782.0">jdk/inter..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.02%)</title><rect x="63.9" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="66.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (423 samples, 3.43%)</title><rect x="64.3" y="755.0" width="40.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="67.3" y="766.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.06%)</title><rect x="67.0" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="70.0" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.06%)</title><rect x="67.6" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="70.6" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (97 samples, 0.79%)</title><rect x="68.4" y="739.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="71.4" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (27 samples, 0.22%)</title><rect x="72.1" y="723.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="75.1" y="734.0"></text>
</g>
<g>
<title>Monitor::unlock() (9 samples, 0.07%)</title><rect x="74.7" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="77.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (22 samples, 0.18%)</title><rect x="75.6" y="723.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="78.6" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (11 samples, 0.09%)</title><rect x="77.9" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="80.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (10 samples, 0.08%)</title><rect x="78.9" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="81.9" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (210 samples, 1.70%)</title><rect x="80.0" y="739.0" width="20.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="83.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (107 samples, 0.87%)</title><rect x="89.8" y="723.0" width="10.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="92.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (107 samples, 0.87%)</title><rect x="89.8" y="707.0" width="10.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="92.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 0.50%)</title><rect x="94.1" y="691.0" width="5.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="97.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (53 samples, 0.43%)</title><rect x="95.0" y="675.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="98.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (49 samples, 0.40%)</title><rect x="95.3" y="659.0" width="4.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="98.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.11%)</title><rect x="98.8" y="643.0" width="1.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="101.8" y="654.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="99.4" y="627.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="102.4" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (13 samples, 0.11%)</title><rect x="100.0" y="739.0" width="1.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="103.0" y="750.0"></text>
</g>
<g>
<title>_init (4 samples, 0.03%)</title><rect x="101.4" y="739.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="104.4" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (5 samples, 0.04%)</title><rect x="101.7" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="104.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 0.06%)</title><rect x="102.2" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="105.2" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.02%)</title><rect x="102.9" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="105.9" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (16 samples, 0.13%)</title><rect x="103.2" y="739.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="106.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (374 samples, 3.03%)</title><rect x="104.7" y="755.0" width="35.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="107.7" y="766.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_push (3 samples, 0.02%)</title><rect x="105.0" y="739.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="108.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (346 samples, 2.80%)</title><rect x="105.3" y="739.0" width="33.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="108.3" y="750.0">__..</text>
</g>
<g>
<title>[unknown] (257 samples, 2.08%)</title><rect x="113.8" y="723.0" width="24.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="116.8" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (257 samples, 2.08%)</title><rect x="113.8" y="707.0" width="24.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="116.8" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (220 samples, 1.78%)</title><rect x="117.3" y="691.0" width="21.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="120.3" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (208 samples, 1.68%)</title><rect x="118.5" y="675.0" width="19.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="121.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (201 samples, 1.63%)</title><rect x="119.1" y="659.0" width="19.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="122.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (182 samples, 1.47%)</title><rect x="121.0" y="643.0" width="17.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="124.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (149 samples, 1.21%)</title><rect x="124.1" y="627.0" width="14.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="127.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (119 samples, 0.96%)</title><rect x="127.0" y="611.0" width="11.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="130.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (112 samples, 0.91%)</title><rect x="127.6" y="595.0" width="10.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="130.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.15%)</title><rect x="136.6" y="579.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="139.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="136.7" y="563.0" width="1.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="139.7" y="574.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="136.7" y="547.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="139.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.12%)</title><rect x="136.9" y="531.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="139.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.11%)</title><rect x="137.1" y="515.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="140.1" y="526.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="137.2" y="499.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="140.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="137.2" y="483.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="140.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="137.2" y="467.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="140.2" y="478.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.04%)</title><rect x="138.4" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="141.4" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.02%)</title><rect x="138.8" y="739.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="141.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.03%)</title><rect x="139.1" y="739.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="142.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (8 samples, 0.06%)</title><rect x="139.5" y="739.0" width="0.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="142.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (9 samples, 0.07%)</title><rect x="140.5" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="143.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.03%)</title><rect x="141.3" y="803.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (72 samples, 0.58%)</title><rect x="141.7" y="803.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (69 samples, 0.56%)</title><rect x="142.0" y="787.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (16 samples, 0.13%)</title><rect x="142.0" y="771.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (43 samples, 0.35%)</title><rect x="143.5" y="771.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (6 samples, 0.05%)</title><rect x="143.7" y="755.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (3 samples, 0.02%)</title><rect x="143.8" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (30 samples, 0.24%)</title><rect x="144.3" y="755.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (28 samples, 0.23%)</title><rect x="144.5" y="739.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (27 samples, 0.22%)</title><rect x="144.6" y="723.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (13 samples, 0.11%)</title><rect x="144.6" y="707.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="147.6" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.05%)</title><rect x="144.6" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="147.6" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.02%)</title><rect x="144.8" y="675.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="147.8" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.05%)</title><rect x="145.2" y="691.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="148.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="145.5" y="675.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="148.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="145.5" y="659.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="148.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="145.5" y="643.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="148.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.11%)</title><rect x="145.8" y="707.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="148.8" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (12 samples, 0.10%)</title><rect x="145.8" y="691.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="148.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="145.8" y="675.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="148.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="145.8" y="659.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="148.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.09%)</title><rect x="145.9" y="643.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="148.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.09%)</title><rect x="145.9" y="627.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="148.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.08%)</title><rect x="146.0" y="611.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="149.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.08%)</title><rect x="146.0" y="595.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="149.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="146.3" y="579.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="149.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="146.5" y="563.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="149.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="146.6" y="547.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="149.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.03%)</title><rect x="147.2" y="755.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="150.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.03%)</title><rect x="147.2" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.08%)</title><rect x="147.6" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.08%)</title><rect x="147.6" y="755.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.06%)</title><rect x="147.7" y="739.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.06%)</title><rect x="147.7" y="723.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.7" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (8 samples, 0.06%)</title><rect x="147.7" y="707.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (321 samples, 2.60%)</title><rect x="148.6" y="803.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.6" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (320 samples, 2.59%)</title><rect x="148.7" y="787.0" width="30.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.7" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (319 samples, 2.58%)</title><rect x="148.8" y="771.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.8" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (319 samples, 2.58%)</title><rect x="148.8" y="755.0" width="30.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.8" y="766.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (319 samples, 2.58%)</title><rect x="148.8" y="739.0" width="30.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.8" y="750.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.04%)</title><rect x="149.0" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="152.0" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 0.53%)</title><rect x="149.4" y="723.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="152.4" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (7 samples, 0.06%)</title><rect x="150.4" y="707.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="153.4" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (9 samples, 0.07%)</title><rect x="151.1" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="154.1" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (10 samples, 0.08%)</title><rect x="151.9" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="154.9" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.03%)</title><rect x="152.9" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="155.9" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (11 samples, 0.09%)</title><rect x="153.4" y="707.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="156.4" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (7 samples, 0.06%)</title><rect x="154.4" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="157.4" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.03%)</title><rect x="155.3" y="707.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="158.3" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.05%)</title><rect x="155.6" y="723.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="158.6" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.02%)</title><rect x="156.2" y="723.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="159.2" y="734.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (238 samples, 1.93%)</title><rect x="156.5" y="723.0" width="22.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="159.5" y="734.0">p..</text>
</g>
<g>
<title>[unknown] (196 samples, 1.59%)</title><rect x="160.5" y="707.0" width="18.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="163.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (196 samples, 1.59%)</title><rect x="160.5" y="691.0" width="18.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="163.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (182 samples, 1.47%)</title><rect x="161.9" y="675.0" width="17.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="164.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (180 samples, 1.46%)</title><rect x="162.1" y="659.0" width="17.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="165.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (178 samples, 1.44%)</title><rect x="162.2" y="643.0" width="17.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="165.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (156 samples, 1.26%)</title><rect x="164.3" y="627.0" width="15.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="167.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (141 samples, 1.14%)</title><rect x="165.8" y="611.0" width="13.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="168.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (139 samples, 1.13%)</title><rect x="166.0" y="595.0" width="13.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="169.0" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="579.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="181.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="563.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="181.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="547.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="181.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="531.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="181.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="515.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="181.9" y="526.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="181.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="483.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="181.9" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="178.9" y="467.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="181.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl$$Lambda$68/1965081261.run (5,721 samples, 46.34%)</title><rect x="179.3" y="835.0" width="546.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.3" y="846.0">ru/mail/polis/service/senyast/ServiceImpl$$Lambda$68/1965081261.run</text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.lambda$executeAsync$4 (5,718 samples, 46.31%)</title><rect x="179.6" y="819.0" width="546.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.6" y="830.0">ru/mail/polis/service/senyast/ServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl$$Lambda$65/2078745505.act (1,131 samples, 9.16%)</title><rect x="179.6" y="803.0" width="108.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.6" y="814.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.lambda$daoMethods$1 (1,131 samples, 9.16%)</title><rect x="179.6" y="787.0" width="108.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="182.6" y="798.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.putMethod (1,131 samples, 9.16%)</title><rect x="179.6" y="771.0" width="108.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.6" y="782.0">ru/mail/polis..</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.02%)</title><rect x="179.7" y="755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (51 samples, 0.41%)</title><rect x="180.0" y="755.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (51 samples, 0.41%)</title><rect x="180.0" y="739.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (42 samples, 0.34%)</title><rect x="180.9" y="723.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.9" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (38 samples, 0.31%)</title><rect x="181.3" y="707.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.3" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.12%)</title><rect x="182.7" y="691.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.02%)</title><rect x="183.1" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.06%)</title><rect x="183.5" y="675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.02%)</title><rect x="183.8" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="186.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (8 samples, 0.06%)</title><rect x="184.1" y="691.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.1" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (35 samples, 0.28%)</title><rect x="184.9" y="755.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="187.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.06%)</title><rect x="187.6" y="739.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="190.6" y="750.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.04%)</title><rect x="187.8" y="723.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="190.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.03%)</title><rect x="187.9" y="707.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="190.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/LSMDao.upsert (1,041 samples, 8.43%)</title><rect x="188.2" y="755.0" width="99.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="766.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/MemTablePool.upsert (1,040 samples, 8.42%)</title><rect x="188.3" y="739.0" width="99.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.3" y="750.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/MemTable.upsert (997 samples, 8.07%)</title><rect x="188.8" y="723.0" width="95.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.8" y="734.0">ru/mail/pol..</text>
</g>
<g>
<title>gettimeofday (3 samples, 0.02%)</title><rect x="189.2" y="707.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="192.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (13 samples, 0.11%)</title><rect x="189.5" y="707.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (955 samples, 7.73%)</title><rect x="190.7" y="707.0" width="91.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.7" y="718.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (954 samples, 7.73%)</title><rect x="190.8" y="691.0" width="91.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.8" y="702.0">java/util/c..</text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="215.9" y="675.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="218.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="215.9" y="659.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="218.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="215.9" y="643.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="218.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="216.3" y="627.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="219.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="216.3" y="611.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="219.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="216.3" y="595.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="219.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.07%)</title><rect x="216.6" y="579.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="219.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.07%)</title><rect x="216.6" y="563.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="219.6" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (88 samples, 0.71%)</title><rect x="217.5" y="675.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="220.3" y="659.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="223.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="220.3" y="643.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="223.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="220.3" y="627.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="223.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="220.4" y="611.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="223.4" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (54 samples, 0.44%)</title><rect x="220.7" y="659.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="225.5" y="643.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="228.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="225.5" y="627.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="228.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="225.5" y="611.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="228.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 0.05%)</title><rect x="225.9" y="675.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (167 samples, 1.35%)</title><rect x="226.5" y="675.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="229.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="241.9" y="659.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="244.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="241.9" y="643.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="244.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="241.9" y="627.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="244.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (6 samples, 0.05%)</title><rect x="242.4" y="675.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.02%)</title><rect x="242.7" y="659.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (66 samples, 0.53%)</title><rect x="243.2" y="675.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (32 samples, 0.26%)</title><rect x="244.8" y="659.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.02%)</title><rect x="247.2" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.03%)</title><rect x="247.5" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.03%)</title><rect x="247.5" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.03%)</title><rect x="247.5" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.5" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.02%)</title><rect x="247.6" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (17 samples, 0.14%)</title><rect x="247.9" y="659.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.14%)</title><rect x="247.9" y="643.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 0.14%)</title><rect x="247.9" y="627.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.9" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (12 samples, 0.10%)</title><rect x="248.3" y="611.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.3" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.05%)</title><rect x="248.8" y="595.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.8" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.03%)</title><rect x="249.0" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (320 samples, 2.59%)</title><rect x="249.5" y="675.0" width="30.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.5" y="686.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (301 samples, 2.44%)</title><rect x="251.3" y="659.0" width="28.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.3" y="670.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (295 samples, 2.39%)</title><rect x="251.9" y="643.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.9" y="654.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (84 samples, 0.68%)</title><rect x="254.8" y="627.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.8" y="638.0"></text>
</g>
<g>
<title>vectorizedMismatch (82 samples, 0.66%)</title><rect x="254.9" y="611.0" width="7.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="257.9" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (11 samples, 0.09%)</title><rect x="262.8" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.8" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (151 samples, 1.22%)</title><rect x="263.8" y="627.0" width="14.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (81 samples, 0.66%)</title><rect x="270.5" y="611.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="275.4" y="595.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="278.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="275.4" y="579.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="278.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="275.4" y="563.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="278.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (19 samples, 0.15%)</title><rect x="275.7" y="595.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (8 samples, 0.06%)</title><rect x="277.5" y="595.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (19 samples, 0.15%)</title><rect x="278.3" y="627.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.3" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.03%)</title><rect x="279.2" y="611.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.2" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.04%)</title><rect x="279.6" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (20 samples, 0.16%)</title><rect x="280.1" y="675.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.addAndGet (3 samples, 0.02%)</title><rect x="282.0" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.0" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.08%)</title><rect x="282.3" y="707.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.3" y="718.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.07%)</title><rect x="282.4" y="691.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="285.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.06%)</title><rect x="282.5" y="675.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="285.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/model/Value.getData (6 samples, 0.05%)</title><rect x="283.2" y="707.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/model/Value.of (3 samples, 0.02%)</title><rect x="283.8" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/MemTablePool.syncAddToFlush (38 samples, 0.31%)</title><rect x="284.1" y="723.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.writeLock (3 samples, 0.02%)</title><rect x="285.4" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.writeLock (3 samples, 0.02%)</title><rect x="285.4" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/MemTable.&lt;init&gt; (13 samples, 0.11%)</title><rect x="285.7" y="707.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.&lt;init&gt; (13 samples, 0.11%)</title><rect x="285.7" y="691.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.07%)</title><rect x="286.1" y="675.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="289.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/TableToFlush.&lt;init&gt; (8 samples, 0.06%)</title><rect x="287.0" y="707.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/TableToFlush.&lt;init&gt; (8 samples, 0.06%)</title><rect x="287.0" y="691.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.06%)</title><rect x="287.0" y="675.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.0" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (8 samples, 0.06%)</title><rect x="287.0" y="659.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.sendResponse (4,587 samples, 37.15%)</title><rect x="287.7" y="803.0" width="438.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.7" y="814.0">ru/mail/polis/service/senyast/ServiceImpl.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4,585 samples, 37.13%)</title><rect x="287.8" y="787.0" width="438.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="290.8" y="798.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (52 samples, 0.42%)</title><rect x="290.3" y="771.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (51 samples, 0.41%)</title><rect x="290.4" y="755.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (51 samples, 0.41%)</title><rect x="290.4" y="739.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 0.07%)</title><rect x="292.1" y="723.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 0.07%)</title><rect x="292.1" y="707.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="295.1" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (7 samples, 0.06%)</title><rect x="292.3" y="691.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (20 samples, 0.16%)</title><rect x="293.0" y="723.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.06%)</title><rect x="293.4" y="707.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.4" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.03%)</title><rect x="293.7" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.7" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.06%)</title><rect x="294.1" y="707.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="297.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.03%)</title><rect x="294.9" y="723.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4,451 samples, 36.05%)</title><rect x="295.4" y="771.0" width="425.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.4" y="782.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (178 samples, 1.44%)</title><rect x="295.4" y="755.0" width="17.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.4" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.09%)</title><rect x="297.8" y="739.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="300.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (140 samples, 1.13%)</title><rect x="299.0" y="739.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.05%)</title><rect x="300.0" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.04%)</title><rect x="300.1" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.02%)</title><rect x="300.5" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.5" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (51 samples, 0.41%)</title><rect x="300.8" y="723.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.07%)</title><rect x="304.2" y="707.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.03%)</title><rect x="304.6" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.06%)</title><rect x="305.0" y="707.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.03%)</title><rect x="305.3" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.3" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (70 samples, 0.57%)</title><rect x="305.7" y="723.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (68 samples, 0.55%)</title><rect x="305.9" y="707.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.06%)</title><rect x="311.0" y="691.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (7 samples, 0.06%)</title><rect x="311.0" y="675.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.0" y="686.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (6 samples, 0.05%)</title><rect x="311.8" y="691.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4,273 samples, 34.61%)</title><rect x="312.4" y="755.0" width="408.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="315.4" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (4,267 samples, 34.56%)</title><rect x="313.0" y="739.0" width="407.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.0" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.04%)</title><rect x="313.6" y="723.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="316.6" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4,248 samples, 34.41%)</title><rect x="314.1" y="723.0" width="406.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.1" y="734.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (4,245 samples, 34.38%)</title><rect x="314.4" y="707.0" width="405.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.4" y="718.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (100 samples, 0.81%)</title><rect x="317.3" y="691.0" width="9.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="320.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (99 samples, 0.80%)</title><rect x="317.3" y="675.0" width="9.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="320.3" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (76 samples, 0.62%)</title><rect x="317.3" y="659.0" width="7.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="320.3" y="670.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.03%)</title><rect x="319.0" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="322.0" y="654.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (6 samples, 0.05%)</title><rect x="319.5" y="643.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="322.5" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (41 samples, 0.33%)</title><rect x="320.3" y="643.0" width="3.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="323.3" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (7 samples, 0.06%)</title><rect x="320.5" y="627.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="323.5" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.05%)</title><rect x="321.2" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="324.2" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (14 samples, 0.11%)</title><rect x="321.7" y="627.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="324.7" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (12 samples, 0.10%)</title><rect x="323.1" y="627.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="326.1" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (7 samples, 0.06%)</title><rect x="323.6" y="611.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.6" y="622.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (3 samples, 0.02%)</title><rect x="324.2" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="327.2" y="654.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (6 samples, 0.05%)</title><rect x="324.6" y="659.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="327.6" y="670.0"></text>
</g>
<g>
<title>__send (7 samples, 0.06%)</title><rect x="325.2" y="659.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="328.2" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.06%)</title><rect x="326.0" y="659.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="329.0" y="670.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (18 samples, 0.15%)</title><rect x="326.8" y="691.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="329.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="328.2" y="675.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="331.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="328.2" y="659.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="331.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="328.2" y="643.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="331.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="328.2" y="627.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="331.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="328.2" y="611.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="331.2" y="622.0"></text>
</g>
<g>
<title>__send (4,097 samples, 33.18%)</title><rect x="328.5" y="691.0" width="391.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="331.5" y="702.0">__send</text>
</g>
<g>
<title>[unknown] (3,907 samples, 31.64%)</title><rect x="346.7" y="675.0" width="373.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="349.7" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,907 samples, 31.64%)</title><rect x="346.7" y="659.0" width="373.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="349.7" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,790 samples, 30.70%)</title><rect x="357.9" y="643.0" width="362.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="360.9" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,779 samples, 30.61%)</title><rect x="358.9" y="627.0" width="361.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="361.9" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,733 samples, 30.23%)</title><rect x="363.3" y="611.0" width="356.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="366.3" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,691 samples, 29.89%)</title><rect x="367.3" y="595.0" width="352.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="370.3" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,627 samples, 29.38%)</title><rect x="373.5" y="579.0" width="346.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="376.5" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,603 samples, 29.18%)</title><rect x="375.7" y="563.0" width="344.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="378.7" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,451 samples, 27.95%)</title><rect x="390.3" y="547.0" width="329.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="393.3" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,350 samples, 27.13%)</title><rect x="399.9" y="531.0" width="320.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="402.9" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,179 samples, 25.75%)</title><rect x="416.3" y="515.0" width="303.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="419.3" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3,039 samples, 24.61%)</title><rect x="429.6" y="499.0" width="290.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="432.6" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,769 samples, 22.43%)</title><rect x="455.5" y="483.0" width="264.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="458.5" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,656 samples, 21.51%)</title><rect x="466.3" y="467.0" width="253.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="469.3" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,566 samples, 20.78%)</title><rect x="474.9" y="451.0" width="245.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="477.9" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,524 samples, 20.44%)</title><rect x="478.9" y="435.0" width="241.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="481.9" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,330 samples, 18.87%)</title><rect x="497.4" y="419.0" width="222.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="500.4" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (2,160 samples, 17.49%)</title><rect x="513.7" y="403.0" width="206.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="516.7" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,952 samples, 15.81%)</title><rect x="533.5" y="387.0" width="186.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="536.5" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,673 samples, 13.55%)</title><rect x="560.2" y="371.0" width="159.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="563.2" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,542 samples, 12.49%)</title><rect x="572.7" y="355.0" width="147.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="575.7" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,458 samples, 11.81%)</title><rect x="580.7" y="339.0" width="139.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="583.7" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,387 samples, 11.23%)</title><rect x="587.5" y="323.0" width="132.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="590.5" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,344 samples, 10.89%)</title><rect x="591.6" y="307.0" width="128.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="594.6" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,319 samples, 10.68%)</title><rect x="594.0" y="291.0" width="126.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="597.0" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,269 samples, 10.28%)</title><rect x="598.8" y="275.0" width="121.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="601.8" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,229 samples, 9.95%)</title><rect x="602.6" y="259.0" width="117.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="605.6" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,143 samples, 9.26%)</title><rect x="610.8" y="243.0" width="109.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="613.8" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,116 samples, 9.04%)</title><rect x="613.4" y="227.0" width="106.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="616.4" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,027 samples, 8.32%)</title><rect x="621.9" y="211.0" width="98.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="624.9" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (948 samples, 7.68%)</title><rect x="629.5" y="195.0" width="90.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="632.5" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (750 samples, 6.07%)</title><rect x="648.4" y="179.0" width="71.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="651.4" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (684 samples, 5.54%)</title><rect x="654.7" y="163.0" width="65.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="657.7" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (499 samples, 4.04%)</title><rect x="672.4" y="147.0" width="47.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="675.4" y="158.0">[unk..</text>
</g>
<g>
<title>[unknown] (332 samples, 2.69%)</title><rect x="688.4" y="131.0" width="31.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="691.4" y="142.0">[u..</text>
</g>
<g>
<title>[unknown] (281 samples, 2.28%)</title><rect x="693.2" y="115.0" width="26.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="696.2" y="126.0">[..</text>
</g>
<g>
<title>[unknown] (257 samples, 2.08%)</title><rect x="695.5" y="99.0" width="24.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="698.5" y="110.0">[..</text>
</g>
<g>
<title>[unknown] (56 samples, 0.45%)</title><rect x="714.7" y="83.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="717.7" y="94.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.39%)</title><rect x="715.5" y="67.0" width="4.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="718.5" y="78.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.19%)</title><rect x="717.9" y="51.0" width="2.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="720.9" y="62.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.11%)</title><rect x="718.8" y="35.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="721.8" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.06%)</title><rect x="720.1" y="723.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.1" y="734.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="720.2" y="707.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="723.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (37 samples, 0.30%)</title><rect x="720.8" y="771.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (33 samples, 0.27%)</title><rect x="721.1" y="755.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (6 samples, 0.05%)</title><rect x="721.3" y="739.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (25 samples, 0.20%)</title><rect x="721.9" y="739.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.06%)</title><rect x="722.6" y="723.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.6" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (7 samples, 0.06%)</title><rect x="722.6" y="707.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="725.6" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (3 samples, 0.02%)</title><rect x="722.6" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.6" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.03%)</title><rect x="722.9" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.9" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.02%)</title><rect x="723.0" y="675.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (11 samples, 0.09%)</title><rect x="723.2" y="723.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (11 samples, 0.09%)</title><rect x="723.2" y="707.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="726.2" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (11 samples, 0.09%)</title><rect x="723.2" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="726.2" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (5 samples, 0.04%)</title><rect x="723.8" y="675.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="726.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (16 samples, 0.13%)</title><rect x="724.3" y="771.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="727.3" y="782.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,936 samples, 31.88%)</title><rect x="726.5" y="883.0" width="376.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.5" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (15 samples, 0.12%)</title><rect x="729.1" y="867.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="732.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (55 samples, 0.45%)</title><rect x="730.5" y="867.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (51 samples, 0.41%)</title><rect x="730.9" y="851.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="733.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.06%)</title><rect x="735.1" y="835.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (3 samples, 0.02%)</title><rect x="735.8" y="867.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,276 samples, 10.33%)</title><rect x="736.0" y="867.0" width="122.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.0" y="878.0">one/nio/net/Nat..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="738.2" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="741.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="738.2" y="835.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="741.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="738.2" y="819.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="741.2" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (37 samples, 0.30%)</title><rect x="738.5" y="851.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.5" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (31 samples, 0.25%)</title><rect x="739.0" y="835.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1,213 samples, 9.82%)</title><rect x="742.1" y="851.0" width="115.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.1" y="862.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (15 samples, 0.12%)</title><rect x="745.1" y="835.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="748.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (1,123 samples, 9.10%)</title><rect x="746.6" y="835.0" width="107.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="749.6" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="746.6" y="819.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="749.6" y="830.0"></text>
</g>
<g>
<title>epoll_wait (4 samples, 0.03%)</title><rect x="746.7" y="803.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="749.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="746.7" y="787.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="749.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="746.7" y="771.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="749.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="746.7" y="755.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="749.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="746.7" y="739.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="749.7" y="750.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (21 samples, 0.17%)</title><rect x="747.0" y="819.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="750.0" y="830.0"></text>
</g>
<g>
<title>clock_gettime (10 samples, 0.08%)</title><rect x="749.4" y="819.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="752.4" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (8 samples, 0.06%)</title><rect x="749.6" y="803.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="752.6" y="814.0"></text>
</g>
<g>
<title>epoll_wait (1,083 samples, 8.77%)</title><rect x="750.4" y="819.0" width="103.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="753.4" y="830.0">epoll_wait</text>
</g>
<g>
<title>[unknown] (881 samples, 7.14%)</title><rect x="769.7" y="803.0" width="84.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="772.7" y="814.0">[unknown]</text>
</g>
<g>
<title>[unknown] (881 samples, 7.14%)</title><rect x="769.7" y="787.0" width="84.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="772.7" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (802 samples, 6.50%)</title><rect x="777.2" y="771.0" width="76.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="780.2" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (785 samples, 6.36%)</title><rect x="778.9" y="755.0" width="75.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="781.9" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (754 samples, 6.11%)</title><rect x="781.8" y="739.0" width="72.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="784.8" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (650 samples, 5.26%)</title><rect x="791.8" y="723.0" width="62.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="794.8" y="734.0">[unkno..</text>
</g>
<g>
<title>[unknown] (509 samples, 4.12%)</title><rect x="805.2" y="707.0" width="48.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="808.2" y="718.0">[unk..</text>
</g>
<g>
<title>[unknown] (429 samples, 3.47%)</title><rect x="812.9" y="691.0" width="41.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="815.9" y="702.0">[un..</text>
</g>
<g>
<title>[unknown] (312 samples, 2.53%)</title><rect x="824.1" y="675.0" width="29.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="827.1" y="686.0">[u..</text>
</g>
<g>
<title>[unknown] (21 samples, 0.17%)</title><rect x="851.9" y="659.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="854.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.15%)</title><rect x="852.2" y="643.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="855.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.15%)</title><rect x="852.2" y="627.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="855.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.15%)</title><rect x="852.2" y="611.0" width="1.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="855.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.13%)</title><rect x="852.4" y="595.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="855.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.11%)</title><rect x="852.5" y="579.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="855.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.11%)</title><rect x="852.6" y="563.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="855.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.10%)</title><rect x="852.7" y="547.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="855.7" y="558.0"></text>
</g>
<g>
<title>_init (4 samples, 0.03%)</title><rect x="853.9" y="835.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="856.9" y="846.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.06%)</title><rect x="854.3" y="835.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="857.3" y="846.0"></text>
</g>
<g>
<title>epoll_wait (7 samples, 0.06%)</title><rect x="854.9" y="835.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="857.9" y="846.0"></text>
</g>
<g>
<title>gettimeofday (11 samples, 0.09%)</title><rect x="855.6" y="835.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="858.6" y="846.0"></text>
</g>
<g>
<title>clock_gettime (11 samples, 0.09%)</title><rect x="855.6" y="819.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="858.6" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (10 samples, 0.08%)</title><rect x="855.7" y="803.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="858.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.04%)</title><rect x="856.2" y="787.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="859.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.11%)</title><rect x="856.7" y="835.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="859.7" y="846.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.11%)</title><rect x="856.7" y="819.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="859.7" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (8 samples, 0.06%)</title><rect x="856.7" y="803.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="859.7" y="814.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="857.4" y="803.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="860.4" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.02%)</title><rect x="857.6" y="787.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="860.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,560 samples, 20.73%)</title><rect x="858.0" y="867.0" width="244.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="861.0" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.04%)</title><rect x="862.8" y="851.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="865.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,488 samples, 20.15%)</title><rect x="863.2" y="851.0" width="237.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.2" y="862.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,072 samples, 8.68%)</title><rect x="864.9" y="835.0" width="102.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.9" y="846.0">one/nio/http..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="873.8" y="819.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="876.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="873.8" y="803.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="876.8" y="814.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.03%)</title><rect x="873.8" y="787.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="876.8" y="798.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.02%)</title><rect x="874.1" y="819.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="877.1" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.06%)</title><rect x="874.4" y="819.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="877.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (515 samples, 4.17%)</title><rect x="875.1" y="819.0" width="49.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.1" y="830.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (515 samples, 4.17%)</title><rect x="875.1" y="803.0" width="49.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.1" y="814.0">one/n..</text>
</g>
<g>
<title>RequestHandler1_daoMethods.handleRequest (425 samples, 3.44%)</title><rect x="875.8" y="787.0" width="40.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="878.8" y="798.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (66 samples, 0.53%)</title><rect x="875.8" y="771.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="878.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (22 samples, 0.18%)</title><rect x="876.3" y="755.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (20 samples, 0.16%)</title><rect x="876.5" y="739.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.04%)</title><rect x="878.0" y="723.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (15 samples, 0.12%)</title><rect x="878.4" y="755.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="881.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (13 samples, 0.11%)</title><rect x="878.6" y="739.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (8 samples, 0.06%)</title><rect x="879.1" y="723.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.08%)</title><rect x="879.9" y="755.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="882.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.06%)</title><rect x="880.2" y="739.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="883.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.05%)</title><rect x="880.3" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="883.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (13 samples, 0.11%)</title><rect x="880.8" y="755.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.11%)</title><rect x="880.8" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.11%)</title><rect x="880.8" y="723.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="883.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (11 samples, 0.09%)</title><rect x="881.0" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.daoMethods (359 samples, 2.91%)</title><rect x="882.1" y="771.0" width="34.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.1" y="782.0">ru..</text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.03%)</title><rect x="882.4" y="755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="885.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.03%)</title><rect x="882.4" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="885.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.03%)</title><rect x="882.4" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.4" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.02%)</title><rect x="882.5" y="707.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="885.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (15 samples, 0.12%)</title><rect x="882.7" y="755.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="885.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (14 samples, 0.11%)</title><rect x="882.7" y="739.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="883.7" y="723.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="886.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="883.7" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="886.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.03%)</title><rect x="883.7" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="886.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/senyast/ServiceImpl.executeAsync (337 samples, 2.73%)</title><rect x="884.2" y="755.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.2" y="766.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (335 samples, 2.71%)</title><rect x="884.4" y="739.0" width="32.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="887.4" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (335 samples, 2.71%)</title><rect x="884.4" y="723.0" width="32.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (6 samples, 0.05%)</title><rect x="884.4" y="707.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (239 samples, 1.94%)</title><rect x="885.0" y="707.0" width="22.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.0" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.07%)</title><rect x="885.1" y="691.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.07%)</title><rect x="885.1" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="888.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.02%)</title><rect x="885.1" y="659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.02%)</title><rect x="885.1" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="888.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.02%)</title><rect x="885.1" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.02%)</title><rect x="885.1" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.05%)</title><rect x="885.4" y="659.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.05%)</title><rect x="885.4" y="643.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (229 samples, 1.85%)</title><rect x="886.0" y="691.0" width="21.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.0" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (229 samples, 1.85%)</title><rect x="886.0" y="675.0" width="21.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="889.0" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (229 samples, 1.85%)</title><rect x="886.0" y="659.0" width="21.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.0" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (229 samples, 1.85%)</title><rect x="886.0" y="643.0" width="21.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="889.0" y="654.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (229 samples, 1.85%)</title><rect x="886.0" y="627.0" width="21.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.0" y="638.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (36 samples, 0.29%)</title><rect x="886.1" y="611.0" width="3.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="889.1" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.05%)</title><rect x="887.1" y="595.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="890.1" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (8 samples, 0.06%)</title><rect x="887.8" y="595.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="890.8" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (3 samples, 0.02%)</title><rect x="888.6" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.6" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.02%)</title><rect x="888.9" y="595.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.9" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (190 samples, 1.54%)</title><rect x="889.7" y="611.0" width="18.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="892.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (163 samples, 1.32%)</title><rect x="892.3" y="595.0" width="15.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="895.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (163 samples, 1.32%)</title><rect x="892.3" y="579.0" width="15.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="895.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (149 samples, 1.21%)</title><rect x="893.6" y="563.0" width="14.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="896.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (149 samples, 1.21%)</title><rect x="893.6" y="547.0" width="14.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="896.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (148 samples, 1.20%)</title><rect x="893.7" y="531.0" width="14.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="896.7" y="542.0"></text>
</g>
<g>
<title>[unknown] (132 samples, 1.07%)</title><rect x="895.3" y="515.0" width="12.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="898.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (127 samples, 1.03%)</title><rect x="895.7" y="499.0" width="12.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="898.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (124 samples, 1.00%)</title><rect x="896.0" y="483.0" width="11.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="899.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.04%)</title><rect x="907.9" y="707.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.04%)</title><rect x="907.9" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.02%)</title><rect x="908.1" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (80 samples, 0.65%)</title><rect x="908.4" y="707.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="911.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (74 samples, 0.60%)</title><rect x="908.9" y="691.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="911.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (25 samples, 0.20%)</title><rect x="909.0" y="675.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.07%)</title><rect x="909.3" y="659.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="912.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (10 samples, 0.08%)</title><rect x="910.4" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (34 samples, 0.28%)</title><rect x="911.4" y="675.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (9 samples, 0.07%)</title><rect x="912.5" y="659.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="915.5" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.06%)</title><rect x="912.5" y="643.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (12 samples, 0.10%)</title><rect x="913.5" y="659.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (12 samples, 0.10%)</title><rect x="913.5" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.5" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (11 samples, 0.09%)</title><rect x="913.6" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (14 samples, 0.11%)</title><rect x="914.7" y="675.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="917.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.10%)</title><rect x="914.9" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="917.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (11 samples, 0.09%)</title><rect x="914.9" y="643.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="917.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.03%)</title><rect x="916.0" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.03%)</title><rect x="916.0" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (24 samples, 0.19%)</title><rect x="916.4" y="787.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (22 samples, 0.18%)</title><rect x="916.6" y="771.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.13%)</title><rect x="916.6" y="755.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="919.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equals (8 samples, 0.06%)</title><rect x="917.3" y="739.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.05%)</title><rect x="918.1" y="755.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.05%)</title><rect x="918.1" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (6 samples, 0.05%)</title><rect x="918.1" y="723.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="921.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (59 samples, 0.48%)</title><rect x="918.7" y="787.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="921.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (59 samples, 0.48%)</title><rect x="918.7" y="771.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (6 samples, 0.05%)</title><rect x="920.0" y="755.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="923.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (39 samples, 0.32%)</title><rect x="920.6" y="755.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.04%)</title><rect x="922.8" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="925.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.03%)</title><rect x="922.9" y="723.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="925.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (11 samples, 0.09%)</title><rect x="923.3" y="739.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (229 samples, 1.85%)</title><rect x="924.3" y="819.0" width="21.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="927.3" y="830.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (73 samples, 0.59%)</title><rect x="932.3" y="803.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="935.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (58 samples, 0.47%)</title><rect x="933.8" y="787.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="936.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.02%)</title><rect x="933.8" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="936.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (55 samples, 0.45%)</title><rect x="934.1" y="771.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="937.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (52 samples, 0.42%)</title><rect x="934.4" y="755.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="937.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.03%)</title><rect x="938.9" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="941.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (64 samples, 0.52%)</title><rect x="939.3" y="803.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (63 samples, 0.51%)</title><rect x="939.4" y="787.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="942.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.06%)</title><rect x="945.4" y="803.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="948.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (37 samples, 0.30%)</title><rect x="946.2" y="819.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (22 samples, 0.18%)</title><rect x="946.7" y="803.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="949.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (20 samples, 0.16%)</title><rect x="946.9" y="787.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.04%)</title><rect x="947.9" y="771.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.04%)</title><rect x="947.9" y="755.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="950.9" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (5 samples, 0.04%)</title><rect x="947.9" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.03%)</title><rect x="948.4" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="951.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (10 samples, 0.08%)</title><rect x="948.8" y="803.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (17 samples, 0.14%)</title><rect x="949.7" y="819.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="952.7" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (14 samples, 0.11%)</title><rect x="950.0" y="803.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="953.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (85 samples, 0.69%)</title><rect x="951.4" y="819.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.02%)</title><rect x="953.6" y="803.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (27 samples, 0.22%)</title><rect x="953.8" y="803.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (19 samples, 0.15%)</title><rect x="954.6" y="787.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.05%)</title><rect x="955.9" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (6 samples, 0.05%)</title><rect x="955.9" y="755.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="958.9" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.02%)</title><rect x="956.1" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="959.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.26%)</title><rect x="956.4" y="803.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="959.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.17%)</title><rect x="957.5" y="787.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.5" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (19 samples, 0.15%)</title><rect x="957.7" y="771.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 0.06%)</title><rect x="958.7" y="755.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="961.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (82 samples, 0.66%)</title><rect x="959.5" y="819.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (76 samples, 0.62%)</title><rect x="960.1" y="803.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="963.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="966.3" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="969.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.03%)</title><rect x="966.3" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="969.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.03%)</title><rect x="966.3" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="969.3" y="766.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (7 samples, 0.06%)</title><rect x="966.7" y="787.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="969.7" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (1,399 samples, 11.33%)</title><rect x="967.3" y="835.0" width="133.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="970.3" y="846.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1,393 samples, 11.28%)</title><rect x="967.8" y="819.0" width="133.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="970.8" y="830.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>[unknown] (156 samples, 1.26%)</title><rect x="971.1" y="803.0" width="15.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="974.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (156 samples, 1.26%)</title><rect x="971.1" y="787.0" width="15.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="974.1" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (124 samples, 1.00%)</title><rect x="971.1" y="771.0" width="11.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="974.1" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.05%)</title><rect x="972.1" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.1" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6 samples, 0.05%)</title><rect x="972.7" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (4 samples, 0.03%)</title><rect x="973.2" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="976.2" y="766.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (8 samples, 0.06%)</title><rect x="973.6" y="755.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="976.6" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (76 samples, 0.62%)</title><rect x="974.6" y="755.0" width="7.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="977.6" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (10 samples, 0.08%)</title><rect x="975.7" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="978.7" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (9 samples, 0.07%)</title><rect x="976.9" y="739.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (16 samples, 0.13%)</title><rect x="977.7" y="739.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.7" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (27 samples, 0.22%)</title><rect x="979.3" y="739.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="982.3" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (15 samples, 0.12%)</title><rect x="980.3" y="723.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="983.3" y="734.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (3 samples, 0.02%)</title><rect x="982.0" y="755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="985.0" y="766.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (7 samples, 0.06%)</title><rect x="982.3" y="755.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.3" y="766.0"></text>
</g>
<g>
<title>__GI___recv (13 samples, 0.11%)</title><rect x="983.0" y="771.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="986.0" y="782.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (10 samples, 0.08%)</title><rect x="984.2" y="771.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="987.2" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.07%)</title><rect x="985.2" y="771.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="988.2" y="782.0"></text>
</g>
<g>
<title>__GI___recv (1,193 samples, 9.66%)</title><rect x="986.1" y="803.0" width="114.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="989.1" y="814.0">__GI___recv</text>
</g>
<g>
<title>[unknown] (1,009 samples, 8.17%)</title><rect x="1003.6" y="787.0" width="96.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1006.6" y="798.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,009 samples, 8.17%)</title><rect x="1003.6" y="771.0" width="96.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1006.6" y="782.0">[unknown]</text>
</g>
<g>
<title>[unknown] (854 samples, 6.92%)</title><rect x="1018.5" y="755.0" width="81.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1021.5" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (847 samples, 6.86%)</title><rect x="1019.1" y="739.0" width="81.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1022.1" y="750.0">[unknown]</text>
</g>
<g>
<title>[unknown] (810 samples, 6.56%)</title><rect x="1022.7" y="723.0" width="77.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1025.7" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (762 samples, 6.17%)</title><rect x="1027.2" y="707.0" width="72.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1030.2" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (687 samples, 5.56%)</title><rect x="1034.4" y="691.0" width="65.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1037.4" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (583 samples, 4.72%)</title><rect x="1044.4" y="675.0" width="55.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1047.4" y="686.0">[unkn..</text>
</g>
<g>
<title>[unknown] (442 samples, 3.58%)</title><rect x="1057.8" y="659.0" width="42.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1060.8" y="670.0">[unk..</text>
</g>
<g>
<title>[unknown] (285 samples, 2.31%)</title><rect x="1072.8" y="643.0" width="27.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1075.8" y="654.0">[..</text>
</g>
<g>
<title>[unknown] (82 samples, 0.66%)</title><rect x="1092.2" y="627.0" width="7.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1095.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.08%)</title><rect x="1099.1" y="611.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1102.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="1099.4" y="595.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1102.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="1099.4" y="579.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1102.4" y="590.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="1099.4" y="563.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1102.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.05%)</title><rect x="1099.5" y="547.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1102.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.04%)</title><rect x="1099.6" y="531.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1102.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1099.8" y="515.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1102.8" y="526.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (8 samples, 0.06%)</title><rect x="1100.1" y="803.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1103.1" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (17 samples, 0.14%)</title><rect x="1101.0" y="851.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.0" y="862.0"></text>
</g>
<g>
<title>gettimeofday (15 samples, 0.12%)</title><rect x="1101.2" y="835.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1104.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.05%)</title><rect x="1102.1" y="819.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1105.1" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/LSMDao$FlusherThread.run (474 samples, 3.84%)</title><rect x="1102.7" y="883.0" width="45.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1105.7" y="894.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/LSMDao.flush (473 samples, 3.83%)</title><rect x="1102.7" y="867.0" width="45.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1105.7" y="878.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/FileTable.writeToFile (470 samples, 3.81%)</title><rect x="1102.7" y="851.0" width="45.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1105.7" y="862.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.02%)</title><rect x="1103.2" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1106.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/model/Bytes.fromInt (4 samples, 0.03%)</title><rect x="1104.0" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1107.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.02%)</title><rect x="1104.0" y="819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/model/Value.getData (3 samples, 0.02%)</title><rect x="1104.6" y="835.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1107.6" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.02%)</title><rect x="1104.6" y="819.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1107.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (448 samples, 3.63%)</title><rect x="1104.8" y="835.0" width="42.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1107.8" y="846.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (10 samples, 0.08%)</title><rect x="1104.9" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1107.9" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (10 samples, 0.08%)</title><rect x="1104.9" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.9" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.04%)</title><rect x="1105.4" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1108.4" y="798.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.03%)</title><rect x="1105.5" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.03%)</title><rect x="1105.5" y="755.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1108.5" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (430 samples, 3.48%)</title><rect x="1106.1" y="819.0" width="41.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.1" y="830.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.06%)</title><rect x="1106.2" y="803.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1109.2" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (7 samples, 0.06%)</title><rect x="1106.2" y="787.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1109.2" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (3 samples, 0.02%)</title><rect x="1106.4" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (409 samples, 3.31%)</title><rect x="1106.9" y="803.0" width="39.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.9" y="814.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (409 samples, 3.31%)</title><rect x="1106.9" y="787.0" width="39.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1109.9" y="798.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (409 samples, 3.31%)</title><rect x="1106.9" y="771.0" width="39.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1109.9" y="782.0">sun..</text>
</g>
<g>
<title>[unknown] (401 samples, 3.25%)</title><rect x="1107.7" y="755.0" width="38.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1110.7" y="766.0">[un..</text>
</g>
<g>
<title>write (400 samples, 3.24%)</title><rect x="1107.8" y="739.0" width="38.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1110.8" y="750.0">write</text>
</g>
<g>
<title>[unknown] (317 samples, 2.57%)</title><rect x="1115.7" y="723.0" width="30.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1118.7" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (317 samples, 2.57%)</title><rect x="1115.7" y="707.0" width="30.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1118.7" y="718.0">[u..</text>
</g>
<g>
<title>[unknown] (283 samples, 2.29%)</title><rect x="1119.0" y="691.0" width="27.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1122.0" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (281 samples, 2.28%)</title><rect x="1119.2" y="675.0" width="26.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1122.2" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (272 samples, 2.20%)</title><rect x="1120.0" y="659.0" width="26.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1123.0" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (261 samples, 2.11%)</title><rect x="1121.1" y="643.0" width="24.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1124.1" y="654.0">[..</text>
</g>
<g>
<title>[unknown] (252 samples, 2.04%)</title><rect x="1122.0" y="627.0" width="24.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1125.0" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (247 samples, 2.00%)</title><rect x="1122.4" y="611.0" width="23.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1125.4" y="622.0">[..</text>
</g>
<g>
<title>[unknown] (238 samples, 1.93%)</title><rect x="1123.3" y="595.0" width="22.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1126.3" y="606.0">[..</text>
</g>
<g>
<title>[unknown] (218 samples, 1.77%)</title><rect x="1125.2" y="579.0" width="20.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1128.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (194 samples, 1.57%)</title><rect x="1127.5" y="563.0" width="18.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (173 samples, 1.40%)</title><rect x="1129.5" y="547.0" width="16.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1132.5" y="558.0"></text>
</g>
<g>
<title>[unknown] (147 samples, 1.19%)</title><rect x="1132.0" y="531.0" width="14.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1135.0" y="542.0"></text>
</g>
<g>
<title>[unknown] (123 samples, 1.00%)</title><rect x="1134.3" y="515.0" width="11.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1137.3" y="526.0"></text>
</g>
<g>
<title>[unknown] (108 samples, 0.87%)</title><rect x="1135.7" y="499.0" width="10.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1138.7" y="510.0"></text>
</g>
<g>
<title>[unknown] (91 samples, 0.74%)</title><rect x="1137.3" y="483.0" width="8.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1140.3" y="494.0"></text>
</g>
<g>
<title>[unknown] (65 samples, 0.53%)</title><rect x="1139.8" y="467.0" width="6.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1142.8" y="478.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 0.45%)</title><rect x="1140.7" y="451.0" width="5.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1143.7" y="462.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.33%)</title><rect x="1142.1" y="435.0" width="3.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1145.1" y="446.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.14%)</title><rect x="1144.4" y="419.0" width="1.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1147.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (10 samples, 0.08%)</title><rect x="1146.0" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1149.0" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.03%)</title><rect x="1146.3" y="787.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1149.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (3 samples, 0.02%)</title><rect x="1146.7" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1149.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 0.04%)</title><rect x="1147.2" y="819.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1150.2" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.02%)</title><rect x="1147.4" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/senyast/tables/MemTable.iterator (3 samples, 0.02%)</title><rect x="1147.7" y="851.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1150.7" y="862.0"></text>
</g>
<g>
<title>start_thread (439 samples, 3.56%)</title><rect x="1148.0" y="883.0" width="42.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1151.0" y="894.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (439 samples, 3.56%)</title><rect x="1148.0" y="867.0" width="42.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1151.0" y="878.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (439 samples, 3.56%)</title><rect x="1148.0" y="851.0" width="42.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.0" y="862.0">Thr..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (7 samples, 0.06%)</title><rect x="1148.0" y="835.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="846.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (6 samples, 0.05%)</title><rect x="1148.1" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.1" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (5 samples, 0.04%)</title><rect x="1148.1" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.1" y="814.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.03%)</title><rect x="1148.2" y="787.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="798.0"></text>
</g>
<g>
<title>GangWorker::loop() (141 samples, 1.14%)</title><rect x="1148.7" y="835.0" width="13.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="846.0"></text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (42 samples, 0.34%)</title><rect x="1148.8" y="819.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (42 samples, 0.34%)</title><rect x="1148.8" y="803.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (19 samples, 0.15%)</title><rect x="1148.9" y="787.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (9 samples, 0.07%)</title><rect x="1149.0" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.0" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (7 samples, 0.06%)</title><rect x="1149.2" y="755.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.04%)</title><rect x="1149.4" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.4" y="750.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (3 samples, 0.02%)</title><rect x="1149.6" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.6" y="734.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (7 samples, 0.06%)</title><rect x="1150.1" y="771.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.04%)</title><rect x="1150.1" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.1" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (4 samples, 0.03%)</title><rect x="1150.1" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.1" y="750.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (22 samples, 0.18%)</title><rect x="1150.7" y="787.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.7" y="798.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (16 samples, 0.13%)</title><rect x="1151.3" y="771.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.3" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (15 samples, 0.12%)</title><rect x="1151.4" y="755.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.4" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 0.07%)</title><rect x="1151.9" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="750.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (69 samples, 0.56%)</title><rect x="1153.1" y="819.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.1" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (41 samples, 0.33%)</title><rect x="1153.1" y="803.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (38 samples, 0.31%)</title><rect x="1153.2" y="787.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (33 samples, 0.27%)</title><rect x="1153.7" y="771.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.7" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (17 samples, 0.14%)</title><rect x="1155.2" y="755.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (26 samples, 0.21%)</title><rect x="1157.0" y="803.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.0" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (26 samples, 0.21%)</title><rect x="1157.0" y="787.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (26 samples, 0.21%)</title><rect x="1157.0" y="771.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.0" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (26 samples, 0.21%)</title><rect x="1157.0" y="755.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.0" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (26 samples, 0.21%)</title><rect x="1157.0" y="739.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (22 samples, 0.18%)</title><rect x="1157.0" y="723.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (16 samples, 0.13%)</title><rect x="1157.5" y="707.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.5" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.03%)</title><rect x="1158.7" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (4 samples, 0.03%)</title><rect x="1159.1" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.1" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (4 samples, 0.03%)</title><rect x="1159.1" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.1" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.02%)</title><rect x="1159.1" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="702.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (25 samples, 0.20%)</title><rect x="1159.7" y="819.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.7" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (25 samples, 0.20%)</title><rect x="1159.7" y="803.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.7" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (25 samples, 0.20%)</title><rect x="1159.7" y="787.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.7" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (4 samples, 0.03%)</title><rect x="1161.3" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::run() (277 samples, 2.24%)</title><rect x="1162.2" y="835.0" width="26.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.2" y="846.0">J..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (277 samples, 2.24%)</title><rect x="1162.2" y="819.0" width="26.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="830.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (274 samples, 2.22%)</title><rect x="1162.2" y="803.0" width="26.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.2" y="814.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (271 samples, 2.19%)</title><rect x="1162.2" y="787.0" width="25.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.2" y="798.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (239 samples, 1.94%)</title><rect x="1162.2" y="771.0" width="22.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.2" y="782.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (239 samples, 1.94%)</title><rect x="1162.2" y="755.0" width="22.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.2" y="766.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (124 samples, 1.00%)</title><rect x="1162.4" y="739.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.4" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.04%)</title><rect x="1162.5" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.03%)</title><rect x="1163.0" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.0" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.03%)</title><rect x="1163.0" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (13 samples, 0.11%)</title><rect x="1163.4" y="723.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (12 samples, 0.10%)</title><rect x="1163.4" y="707.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.04%)</title><rect x="1163.4" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="702.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.03%)</title><rect x="1164.1" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (99 samples, 0.80%)</title><rect x="1164.7" y="723.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.05%)</title><rect x="1165.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.05%)</title><rect x="1165.6" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 0.04%)</title><rect x="1165.7" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.06%)</title><rect x="1166.2" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (28 samples, 0.23%)</title><rect x="1166.9" y="707.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.06%)</title><rect x="1167.9" y="691.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.02%)</title><rect x="1168.3" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (8 samples, 0.06%)</title><rect x="1168.6" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.6" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (5 samples, 0.04%)</title><rect x="1168.9" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.02%)</title><rect x="1169.5" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.02%)</title><rect x="1169.5" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.06%)</title><rect x="1169.8" y="707.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.82] (3 samples, 0.02%)</title><rect x="1170.5" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (5 samples, 0.04%)</title><rect x="1170.8" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (11 samples, 0.09%)</title><rect x="1171.3" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.04%)</title><rect x="1171.8" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.03%)</title><rect x="1172.8" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 0.06%)</title><rect x="1173.2" y="707.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.2" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (72 samples, 0.58%)</title><rect x="1174.3" y="739.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (51 samples, 0.41%)</title><rect x="1175.3" y="723.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (7 samples, 0.06%)</title><rect x="1175.4" y="707.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.04%)</title><rect x="1176.0" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 0.19%)</title><rect x="1176.5" y="707.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 0.16%)</title><rect x="1176.9" y="691.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 0.11%)</title><rect x="1177.4" y="675.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 0.08%)</title><rect x="1177.8" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.08%)</title><rect x="1179.0" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (3 samples, 0.02%)</title><rect x="1179.4" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.02%)</title><rect x="1179.7" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.06%)</title><rect x="1180.3" y="723.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.06%)</title><rect x="1180.3" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (36 samples, 0.29%)</title><rect x="1181.3" y="739.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (36 samples, 0.29%)</title><rect x="1181.3" y="723.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (36 samples, 0.29%)</title><rect x="1181.3" y="707.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (36 samples, 0.29%)</title><rect x="1181.3" y="691.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (36 samples, 0.29%)</title><rect x="1181.3" y="675.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (30 samples, 0.24%)</title><rect x="1181.4" y="659.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.19%)</title><rect x="1181.6" y="643.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.19%)</title><rect x="1181.6" y="627.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (24 samples, 0.19%)</title><rect x="1181.6" y="611.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (24 samples, 0.19%)</title><rect x="1181.6" y="595.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (24 samples, 0.19%)</title><rect x="1181.6" y="579.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (24 samples, 0.19%)</title><rect x="1181.6" y="563.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.15%)</title><rect x="1181.7" y="547.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.15%)</title><rect x="1181.7" y="531.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.15%)</title><rect x="1181.8" y="515.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.15%)</title><rect x="1181.8" y="499.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 0.15%)</title><rect x="1181.8" y="483.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.14%)</title><rect x="1181.8" y="467.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.02%)</title><rect x="1181.8" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.02%)</title><rect x="1181.8" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.02%)</title><rect x="1181.8" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.02%)</title><rect x="1181.8" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.02%)</title><rect x="1181.8" y="387.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.02%)</title><rect x="1181.8" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.09%)</title><rect x="1182.3" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.09%)</title><rect x="1182.3" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.08%)</title><rect x="1182.4" y="419.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.08%)</title><rect x="1182.4" y="403.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.08%)</title><rect x="1182.4" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.06%)</title><rect x="1182.4" y="371.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1182.4" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1182.4" y="339.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1182.5" y="323.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1182.5" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.04%)</title><rect x="1182.5" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1182.6" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.03%)</title><rect x="1182.6" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.03%)</title><rect x="1182.6" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.03%)</title><rect x="1182.6" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.03%)</title><rect x="1182.6" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1182.6" y="195.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.02%)</title><rect x="1183.5" y="547.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.02%)</title><rect x="1183.5" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.02%)</title><rect x="1183.5" y="515.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.02%)</title><rect x="1183.5" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.02%)</title><rect x="1183.5" y="483.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.02%)</title><rect x="1183.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.02%)</title><rect x="1183.9" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.02%)</title><rect x="1183.9" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.02%)</title><rect x="1183.9" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.02%)</title><rect x="1184.3" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (31 samples, 0.25%)</title><rect x="1185.1" y="771.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (31 samples, 0.25%)</title><rect x="1185.1" y="755.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (31 samples, 0.25%)</title><rect x="1185.1" y="739.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (29 samples, 0.23%)</title><rect x="1185.1" y="723.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="734.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (13 samples, 0.11%)</title><rect x="1185.1" y="707.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (11 samples, 0.09%)</title><rect x="1185.3" y="691.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="702.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (11 samples, 0.09%)</title><rect x="1185.3" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (11 samples, 0.09%)</title><rect x="1185.3" y="659.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (9 samples, 0.07%)</title><rect x="1185.4" y="643.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (9 samples, 0.07%)</title><rect x="1185.4" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (8 samples, 0.06%)</title><rect x="1185.5" y="611.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (7 samples, 0.06%)</title><rect x="1185.5" y="595.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (6 samples, 0.05%)</title><rect x="1185.6" y="579.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.05%)</title><rect x="1185.6" y="563.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.04%)</title><rect x="1185.6" y="547.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.04%)</title><rect x="1185.6" y="531.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.6" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.04%)</title><rect x="1185.6" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="526.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (6 samples, 0.05%)</title><rect x="1186.4" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (5 samples, 0.04%)</title><rect x="1186.4" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.4" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (10 samples, 0.08%)</title><rect x="1186.9" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (10 samples, 0.08%)</title><rect x="1186.9" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (4 samples, 0.03%)</title><rect x="1187.0" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="686.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (4 samples, 0.03%)</title><rect x="1187.0" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (4 samples, 0.03%)</title><rect x="1187.0" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="654.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.02%)</title><rect x="1187.4" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (3 samples, 0.02%)</title><rect x="1188.1" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>__GI_sysinfo (3 samples, 0.02%)</title><rect x="1188.1" y="771.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="755.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="739.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="723.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="707.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="691.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1191.1" y="702.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="675.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.02%)</title><rect x="1188.1" y="659.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1191.1" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (3 samples, 0.02%)</title><rect x="1188.4" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="814.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.02%)</title><rect x="1188.4" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="798.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (3 samples, 0.02%)</title><rect x="1188.4" y="771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (3 samples, 0.02%)</title><rect x="1188.4" y="755.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1191.4" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (12 samples, 0.10%)</title><rect x="1188.9" y="835.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (6 samples, 0.05%)</title><rect x="1188.9" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (3 samples, 0.02%)</title><rect x="1189.0" y="803.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.05%)</title><rect x="1189.4" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.4" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.04%)</title><rect x="1189.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.04%)</title><rect x="1189.5" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.02%)</title><rect x="1189.5" y="771.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1192.5" y="782.0"></text>
</g>
</g>
</svg>
